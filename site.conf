server {
  listen 80;
  client_max_body_size 64000M;

  root /var/www/default/htdocs/httpdocs;
  index index.html index.htm index.php;

  # Include any additional nginx configs
  include /etc/nginx/conf.d/includes/*.conf;

  # Before uncommenting this go to /etc/nginx/ssl and run "openssl dhparam -out dhparams.pem 2048"
  #ssl_dhparam /etc/nginx/ssl/dhparams.pem;

  # Disabling unsafe protocols
  #ssl_prefer_server_ciphers on;
  #ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  #ssl_ciphers "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4:!3DES";

  # Config to enable HSTS
  add_header Strict-Transport-Security "max-age=31536000; includeSubdomains;";

  # X-Frame options clickjacking
  add_header X-Frame-Options "SAMEORIGIN";
  add_header X-Content-Type-Options nosniff;
  # this one might be problematic on older nginx versions
  add_header X-Xss-Protection "1; mode=block" always;

  # Use fastcgi for all 'image' files



  # Use fastcgi for all PHP files
  location ~ \.php$ {
    try_files $uri =404;
    resolver 127.0.0.11 valid=5s;
    set $service "php";
    fastcgi_pass $service:9000;
    fastcgi_index index.php;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    fastcgi_param HTTP_PROXY "";
    include /etc/nginx/fastcgi_params;
  }

#  location ~* ^/images/ {
#    #rewrite ^/images/ /Site/View.php?id=$query_string break;
#        try_files $uri $uri/ /Site/View.php?id=$is_args$args;
#  }

#Static Contents
location ~* ^/images/.+.([0-9]).*$ {
    try_files $uri  /$uri @backend;
    add_header Pragma "public";
    add_header Cache-Control "public";
    expires     1y;
    access_log  on;
    log_not_found on;
}

location @backend {
    rewrite  ^(.*)$ /Site/View.php?id=$1;
}

# API Redirections
location ~* ^/api/.*$ {
    try_files $uri  /$uri @api;
    access_log  on;
    log_not_found on;
}

location @api {
    rewrite  ^(.*)$ /api.php?$1;
}

  location = /favicon.ico {
    #log_not_found off;
    #access_log off;
  }

  location = /robots.txt {
    allow all;
    log_not_found off;
    access_log off;
  }

  location ~ \..*/.*\.php$ {
    return 403;
  }

location / {
    try_files $uri $uri.html $uri/ @extensionless-php;
    index index.html index.htm index.php;
}

location ~ \.php$ {
    try_files $uri =404;
}

location @extensionless-php {
    rewrite ^(.*)$ $1.php last;
}

  #location / {
    # This is cool because no php is touched for static content
  #  try_files $uri /index.php?$query_string;
  #}

  ##CiviCRM 4.4.x above - limit access to sensitive information
  #location ~ ^/sites/.*/files/civicrm/(ConfigAndLog|upload|templates_c|custom) {
  #  deny all;
  #}
#
  ##Restrict access to private and temporary files folder
  #location ~ ^/sites/.*/files/(private|temp|tmp|backup_migrate) {
  #  deny all;
  #}

  #location @rewrite {
  #  # Some modules enforce no slash (/) at the end of the URL
  #  # Else this rewrite block wouldn't be needed (GlobalRedirect)
  #  rewrite ^/(.*)$ /index.php?q=$1;
  #}

  # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store
  location ~ /\. {
    deny all;
    access_log off;
    log_not_found off;
  }

  # Don't log and deny access to files which end with ~, as these are usually backup files.
  location ~ ~$ {
    access_log off;
    log_not_found off;
    deny all;
  }
}
